package com.rbs.data.repository;

import com.rbs.data.entity.BookingEntity;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.test.context.ActiveProfiles;

import java.math.BigDecimal;
import java.time.ZonedDateTime;
import java.util.UUID;

import static java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME;
import static org.junit.jupiter.api.Assertions.*;

@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
@DataJpaTest
@ActiveProfiles("component-test")
class BookingRepositoryComponentTest {
    private static final ZonedDateTime NOW =
            ZonedDateTime.from(ISO_OFFSET_DATE_TIME.parse("2020-06-14T10:54:27.6374357+02:00"));
    private static final UUID CLIENT_ID = UUID.randomUUID();
    @Autowired
    private TestEntityManager testEntityManager;

    @Autowired
    private BookingRepository bookingRepository;

    @Test
    void testSave() {
        final var id = bookingRepository.save(createBookingEntity()).getId();

        final var actualBookingEntity = testEntityManager.find(BookingEntity.class, id);
        assertNotNull(actualBookingEntity);
        actualBookingEntity.setId(null); // To not compare autogenerated stuff
        assertEquals(createBookingEntity(), actualBookingEntity);
    }

    @Test
    void testGetByClientId() {
        testEntityManager.persist(createBookingEntity());

        final var actualBookingEntities = bookingRepository.findAllByClientId(CLIENT_ID);
        assertNotNull(actualBookingEntities);
        assertEquals(1, actualBookingEntities.size());
        final var actualBookingEntity = actualBookingEntities.get(0);
        actualBookingEntity.setId(null); // To not compare autogenerated stuff
        assertEquals(createBookingEntity(), actualBookingEntity);
    }

    @Test
    void testGetByClientIdAndCreationTime() {
        // Preparing some dates here:
        final var offset = NOW.getOffset();
        final var firstDayOfMonth = NOW.toLocalDate().withDayOfMonth(1).atStartOfDay().toInstant(offset);
        final var lastDayOfMonth = NOW.toLocalDate().withDayOfMonth(NOW.toLocalDate().lengthOfMonth())
                .atTime(23, 59, 59).toInstant(offset);

        // Current month entities:
        final var entity1 = bookingEntityBuilder().creationTime(firstDayOfMonth).build();
        final var entity2 = bookingEntityBuilder().creationTime(NOW.toInstant()).build();
        final var entity3 = bookingEntityBuilder().creationTime(lastDayOfMonth).build();

        // Not current month entities:
        final var entity4 = bookingEntityBuilder().creationTime(NOW.plusDays(30).toInstant()).build();
        final var entity5 = bookingEntityBuilder().creationTime(NOW.minusDays(30).toInstant()).build();

        // Saving all those entities from above:
        testEntityManager.persist(entity1);
        testEntityManager.persist(entity2);
        testEntityManager.persist(entity3);
        testEntityManager.persist(entity4);
        testEntityManager.persist(entity5);

        // Just making sure they all are saved:
        assertEquals(5, bookingRepository.findAllByClientId(CLIENT_ID).size());

        final var actualBookingEntities =
                bookingRepository.findAllByClientIdAndCreationTimeBetween(CLIENT_ID, firstDayOfMonth, lastDayOfMonth);
        assertNotNull(actualBookingEntities);
        assertEquals(3, actualBookingEntities.size(),
                "Only entities for current month are supposed to be returned");
        actualBookingEntities.forEach(entity -> entity.setId(null));// To not compare autogenerated stuff
        assertTrue(actualBookingEntities.contains(entity1), "Entity 1 is supposed to be returned");
        assertTrue(actualBookingEntities.contains(entity2), "Entity 2 is supposed to be returned");
        assertTrue(actualBookingEntities.contains(entity3), "Entity 3 is supposed to be returned");
    }

    private static BookingEntity createBookingEntity() {
        return bookingEntityBuilder().build();
    }

    private static BookingEntity.BookingEntityBuilder bookingEntityBuilder() {
        return BookingEntity.builder()
                .creationTime(NOW.toInstant())
                .amount(BigDecimal.TEN)
                .currency("GBP")
                .clientId(CLIENT_ID)
                .description("Some description");
    }
}